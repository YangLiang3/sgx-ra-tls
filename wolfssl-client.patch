diff --git a/tls/client-tls.c b/tls/client-tls.c
index a72dfad..062f001 100644
--- a/tls/client-tls.c
+++ b/tls/client-tls.c
@@ -36,9 +36,20 @@
 
 #define DEFAULT_PORT 11111
 
-#define CERT_FILE "../certs/ca-cert.pem"
+#include <sgx_quote.h>
 
+#include "ra.h"
+#include "ra-challenger.h"
 
+static
+int cert_verify_callback(int preverify, WOLFSSL_X509_STORE_CTX* store) {
+
+    (void) preverify;
+
+    int ret = verify_sgx_cert_extensions(store->certs->buffer,
+                                         store->certs->length);
+    return !ret;
+}
 
 int main(int argc, char** argv)
 {
@@ -51,15 +62,8 @@ int main(int argc, char** argv)
     WOLFSSL_CTX* ctx;
     WOLFSSL*     ssl;
 
-
-
-    /* Check for proper calling convention */
-    if (argc != 2) {
-        printf("usage: %s <IPv4 address>\n", argv[0]);
-        return 0;
-    }
-
-
+    (void) argc;
+    (void) argv;
 
     /* Initialize wolfSSL */
     wolfSSL_Init();
@@ -82,16 +86,6 @@ int main(int argc, char** argv)
         return -1;
     }
 
-    /* Load client certificates into WOLFSSL_CTX */
-    if (wolfSSL_CTX_load_verify_locations(ctx, CERT_FILE, NULL)
-        != SSL_SUCCESS) {
-        fprintf(stderr, "ERROR: failed to load %s, please check the file.\n",
-                CERT_FILE);
-        return -1;
-    }
-
-
-
     /* Initialize the server address struct with zeros */
     memset(&servAddr, 0, sizeof(servAddr));
 
@@ -99,8 +93,10 @@ int main(int argc, char** argv)
     servAddr.sin_family = AF_INET;             /* using IPv4      */
     servAddr.sin_port   = htons(DEFAULT_PORT); /* on DEFAULT_PORT */
 
+    const char* srvaddr = "127.0.0.1";
+
     /* Get the server IPv4 address from the command line call */
-    if (inet_pton(AF_INET, argv[1], &servAddr.sin_addr) != 1) {
+    if (inet_pton(AF_INET, srvaddr, &servAddr.sin_addr) != 1) {
         fprintf(stderr, "ERROR: invalid address\n");
         return -1;
     }
@@ -114,7 +110,7 @@ int main(int argc, char** argv)
         return -1;
     }
 
-
+    wolfSSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, cert_verify_callback);
 
     /* Create a WOLFSSL object */
     if ((ssl = wolfSSL_new(ctx)) == NULL) {
@@ -131,22 +127,32 @@ int main(int argc, char** argv)
         return -1;
     }
 
+    WOLFSSL_X509* crt = wolfSSL_get_peer_certificate(ssl);
+    int derSz;
+    const unsigned char* der = wolfSSL_X509_get_der(crt, &derSz);
 
+    sgx_quote_t quote;
+    get_quote_from_cert(der, derSz, &quote);
+    sgx_report_body_t* body = &quote.report_body;
 
-    /* Get a message for the server from stdin */
-    printf("Message for server: ");
-    memset(buff, 0, sizeof(buff));
-    fgets(buff, sizeof(buff), stdin);
-    len = strnlen(buff, sizeof(buff));
+    printf("Certificate's SGX information:\n");
+    printf("  . MRENCLAVE = ");
+    for (int i=0; i < SGX_HASH_SIZE; ++i) printf("%02x", body->mr_enclave.m[i]);
+    printf("\n");
+    
+    printf("  . MRSIGNER  = ");
+    for (int i=0; i < SGX_HASH_SIZE; ++i) printf("%02x", body->mr_signer.m[i]);
+    printf("\n");
+
+    const char* http_request = "GET / HTTP/1.0\r\n\r\n";
+    len = strlen(http_request);
 
     /* Send the message to the server */
-    if (wolfSSL_write(ssl, buff, len) != len) {
+    if (wolfSSL_write(ssl, http_request, len) != (int) len) {
         fprintf(stderr, "ERROR: failed to write\n");
         return -1;
     }
 
-
-
     /* Read the server data into our buff array */
     memset(buff, 0, sizeof(buff));
     if (wolfSSL_read(ssl, buff, sizeof(buff)-1) == -1) {
@@ -155,7 +161,7 @@ int main(int argc, char** argv)
     }
 
     /* Print to stdout any data the server sends */
-    printf("Server: %s\n", buff);
+    printf("Server:\n%s\n", buff);
 
 
 
